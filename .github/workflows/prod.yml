name: Build, Test and Deploy to Prod

# Trigger the workflow when changes are pushed to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

      # Cache dependencies to speed up build times
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          app-service/.cargo
          app-service/target/
          auth-service/.cargo
          auth-service/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Install Rust
      run: rustup update stable && rustup default stable

    - name: Build and test app-service code
      working-directory: ./app-service
      run: |
        cargo build --verbose
        cargo test --verbose

    - name: Build and test auth-service code
      working-directory: ./auth-service
      run: |
        export JWT_SECRET=secret
        cargo build --verbose
        cargo test --verbose

      # Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/bake-action@v5
      with:
        push: true
        files: |
          compose.yml
          compose.override.yml
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install sshpass
      run: sudo apt-get install sshpass

    - name: Copy compose.yml and Caddyfile to droplet
      run: |
        sshpass -v -p '${{ secrets.DROPLET_PASSWORD }}' scp -o StrictHostKeyChecking=no compose.yml root@${{ vars.DROPLET_IP }}:/root/
        # Copy Caddyfile to /tmp to avoid permission or file/dir conflict issues
        sshpass -v -p '${{ secrets.DROPLET_PASSWORD }}' scp -o StrictHostKeyChecking=no Caddyfile root@${{ vars.DROPLET_IP }}:/tmp/

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.DROPLET_IP }}
        username: root
        password: ${{ secrets.DROPLET_PASSWORD }}
        script: |
          set -e
          # Check disk space and permissions
          echo "Checking disk space and permissions..."
          df -h || { echo "Disk space check failed"; exit 1; }
          ls -ld /root || { echo "/root not accessible"; exit 1; }
          # Remove /root/Caddyfile if it is a directory
          if [ -d /root/Caddyfile ]; then
            echo "/root/Caddyfile is a directory, removing..."
            rm -rf /root/Caddyfile || { echo "Failed to remove /root/Caddyfile directory"; exit 1; }
          fi
          # Move Caddyfile from /tmp to /root, overwrite if needed
          if [ -f /tmp/Caddyfile ]; then
            mv -f /tmp/Caddyfile /root/Caddyfile || { echo "Failed to move Caddyfile to /root"; exit 1; }
          else
            echo "/tmp/Caddyfile not found!"; exit 1;
          fi
          # Double-check Caddyfile is a file
          if [ ! -f /root/Caddyfile ]; then
            echo "/root/Caddyfile is not a file after move!"; exit 1;
          fi
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          export AUTH_SERVICE_IP=${{ vars.DROPLET_IP }}
          docker compose down || true
          docker compose pull
          docker compose up -d